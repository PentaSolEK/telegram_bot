import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
import logging
from dotenv import load_dotenv
import os

import json
from datetime import datetime, timedelta

load_dotenv('.env')

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
INVITE_LINKS = os.getenv("INVITE_LINKS").split(",")


logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—ç—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ
pending_hashes = {}

USED_LINKS_FILE = "used_links.txt"

def load_used_links():
    if not os.path.exists(USED_LINKS_FILE):
        return set()
    with open(USED_LINKS_FILE, "r") as f:
        return set(line.strip() for line in f if line.strip())

def save_used_link(link):
    with open(USED_LINKS_FILE, "a") as f:
        f.write(link + "\n")

def get_fresh_invite_link():
    used = load_used_links()
    for link in INVITE_LINKS:
        if link not in used:
            save_used_link(link)
            return link
    return None

SUBSCRIPTIONS_FILE = "subscriptions.json"

def load_subscriptions():
    if not os.path.exists(SUBSCRIPTIONS_FILE):
        return {}
    with open(SUBSCRIPTIONS_FILE, "r") as f:
        return json.load(f)

def save_subscriptions(subs):
    with open(SUBSCRIPTIONS_FILE, "w") as f:
        json.dump(subs, f, indent=4)


def add_subscription(username: str, user_id: int, duration_days: int, price: int):
    subs = load_subscriptions()
    end_date = (datetime.now() + timedelta(days=duration_days)).strftime("%Y-%m-%d")

    subs[username] = {
        "id": user_id,
        "duration_days": duration_days,
        "price": price,
        "end_date": end_date
    }
    save_subscriptions(subs)

def get_subscription_info(username):
    subs = load_subscriptions()
    entry = subs.get(username)
    if not entry:
        return None

    end_date = datetime.strptime(entry["end_date"], "%Y-%m-%d")
    remaining_days = (end_date - datetime.now()).days

    if remaining_days < 0:
        return None

    return {
        "days_total": entry["duration_days"],
        "days_left": remaining_days,
        "end_date": entry["end_date"]
    }

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subs")],
        [InlineKeyboardButton(text="üí∏ –¢–∞—Ä–∏—Ñ—ã", callback_data="plans")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query(F.data == "subs")
async def show_subscriptions(callback: types.CallbackQuery):
    info = get_subscription_info(callback.from_user.username)
    if info:
        await callback.message.answer(
            f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {info['days_total']} –¥–Ω–µ–π.\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ {info['days_left']} –¥–Ω–µ–π."
        )
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="plans")]
        ])
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=kb)

@dp.callback_query(F.data == "plans")
async def show_plans(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏ - 30", callback_data="plan_2")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 50$", callback_data="plan_1")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 100$", callback_data="plan_3")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=kb)

@dp.callback_query(F.data.in_(["plan_1", "plan_2", "plan_3"]))
async def choose_plan(callback: types.CallbackQuery):
    if callback.data == "plan_2":
        duration = "14 –¥–Ω–µ–π"
    elif callback.data == "plan_1":
        duration = "30 –¥–Ω–µ–π"
    else:
        duration = "90 –¥–Ω–µ–π"
    if callback.data == "plan_2":
        price = '30$'
    elif callback.data == 'plan_1':
        price = '50$'
    else:
        price = '100$'
    plan_id = callback.data

    payment_text = (
        f"<b>{duration}</b>\n–¶–µ–Ω–∞: {price}\n\n"
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
        "<b>USDT/ETH (ERC20/BEP20)</b>\n"
        "<code>0x5b14bf001d58a8b4fae027fb670874e43bf6030e</code>\n\n"
        "<b>USDT (TRC20)</b>\n"
        "<code>TURQhUFCVx4Z3aDpKgpA1NB1moGB3maRbn</code>\n\n"
        "<b>SOL</b>\n"
        "<code>2pZq9xPShNmuqt9QoaJiw5hAkD1LU5pue6bkmbnActue</code>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{plan_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="plans")]
    ])

    await callback.message.edit_text(
        payment_text,
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )


@dp.callback_query(F.data.startswith("paid_"))
async def wait_for_hash(callback: types.CallbackQuery):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    pending_hashes[callback.from_user.id] = {
        "plan": callback.data,
        "username": callback.from_user.username or callback.from_user.id
    }

@dp.message()
async def receive_tx_hash(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pending_hashes:
        await message.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return

    tx_hash = message.text.strip()
    plan_data = pending_hashes.pop(user_id)
    plan = plan_data["plan"]
    username = plan_data["username"]

    if plan == "paid_plan_2":
        duration = 14
        price = 30
    elif plan == "paid_plan_1":
        duration = 30
        price = 50
    elif plan == "paid_plan_3":
        duration = 90
        price = 100
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞.")
        return

    add_subscription(username, user_id, duration, price)

    admin_text = (
        f"–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {duration} –¥–Ω–µ–π\n"
        f"–¶–µ–Ω–∞: {price}$\n"
        f"–•—ç—à: {tx_hash}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"approve_{user_id}")],
        [InlineKeyboardButton(text="–û—à–∏–±–∫–∞", callback_data=f"reject_{user_id}")]
    ])
    await bot.send_message(ADMIN_ID, admin_text, reply_markup=kb)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è. –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫.")

@dp.callback_query(F.data.startswith("approve_"))
async def send_link(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    invite_link = get_fresh_invite_link()

    if invite_link:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subs")]
        ])
        await bot.send_message(
            user_id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏! –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {invite_link}\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–æ–º—å—é–Ω–∏—Ç–∏!",
            reply_markup=kb
        )
        await callback.message.delete()
        await callback.answer("–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    else:
        await bot.send_message(
            user_id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º."
        )
        await callback.message.delete()
        await callback.answer("–°—Å—ã–ª–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_payment(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="plans")]
    ])
    await bot.send_message(user_id,
                           "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                           reply_markup=kb
                           )
    await callback.message.delete()
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.")

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
